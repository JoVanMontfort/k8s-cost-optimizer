name: Monitor Kubernetes Costs
on:
  schedule:
    - cron: '0 0 * * *'  # Daily at midnight UTC (1 AM CEST)
  workflow_dispatch:  # Enables manual triggering
jobs:
  check-metrics:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Ensure script permissions
      run: chmod +x scripts/check-metrics.sh
    - name: Install deps
      run: sudo apt-get update && sudo apt-get install -y curl jq bc
    - name: Run metric check
      id: check-metrics
      env:
        COCKPIT_TOKEN: ${{ secrets.COCKPIT_TOKEN }}
        DATA_SOURCE_ID: d2967af6-7cae-4d15-bcf6-d128c3c2f81b  # Your actual data source ID
        CLUSTER_NAME: k8s-triggeriq-fe-cluster
      run: |
        OUTPUT=$(./scripts/check-metrics.sh "$COCKPIT_TOKEN" "$DATA_SOURCE_ID" "$CLUSTER_NAME")
        echo "$OUTPUT"
        
        # Extract metrics from the new script output
        CPU=$(echo "$OUTPUT" | grep "Cluster CPU usage:" | grep -o '[0-9.]*%' | tr -d '%' || echo "unknown")
        if [ "$CPU" = "unknown" ]; then
          CPU=$(echo "$OUTPUT" | grep "ALERT: Cluster CPU" | grep -o '[0-9.]*%' | tr -d '%' || echo "unknown")
        fi
        
        MEMORY=$(echo "$OUTPUT" | grep "Memory usage:" | grep -o '[0-9.]*%' | tr -d '%' || echo "unknown")
        NODE_COUNT=$(echo "$OUTPUT" | grep "Cluster node count:" | awk '{print $NF}' || echo "unknown")
        POD_USAGE=$(echo "$OUTPUT" | grep "Pod capacity usage:" | grep -o '[0-9.]*%' | tr -d '%' || echo "unknown")
        CONTROLPLANE=$(echo "$OUTPUT" | grep "Control plane:" | awk '{print $NF}' || echo "unknown")
        INSTANCE_CPU=$(echo "$OUTPUT" | grep "Instance CPU" | grep -o '[0-9.]*%' | tr -d '%' || echo "unknown")
        
        echo "cpu=$CPU" >> $GITHUB_OUTPUT
        echo "memory=$MEMORY" >> $GITHUB_OUTPUT
        echo "node_count=$NODE_COUNT" >> $GITHUB_OUTPUT
        echo "pod_usage=$POD_USAGE" >> $GITHUB_OUTPUT
        echo "controlplane=$CONTROLPLANE" >> $GITHUB_OUTPUT
        echo "instance_cpu=$INSTANCE_CPU" >> $GITHUB_OUTPUT
        
        # Save summary for Slack
        echo "SUMMARY=$(echo "$OUTPUT" | grep '^SUMMARY:' | cut -d: -f2-)" >> $GITHUB_ENV
    - name: Notify Slack
      uses: slackapi/slack-github-action@v2.1.1
      env:
        CLUSTER_NAME: k8s-triggeriq-fe-cluster
      with:
        method: chat.postMessage
        token: ${{ secrets.SLACK_BOT_TOKEN }}  # Use correct secret name
        payload: |
          {
            "channel": "D09GZCRDRNE",
            "text": "Daily Cost Check for *${CLUSTER_NAME}*:\n*Cluster CPU*: ${{ steps.check-metrics.outputs.cpu }}%\n*Memory Usage*: ${{ steps.check-metrics.outputs.memory }}%\n*Node Count*: ${{ steps.check-metrics.outputs.node_count }}\n*Pod Capacity*: ${{ steps.check-metrics.outputs.pod_usage }}%\n*Control Plane*: ${{ steps.check-metrics.outputs.controlplane }}\n*Instance CPU*: ${{ steps.check-metrics.outputs.instance_cpu }}%\n\n_Note: Container-level metrics require Metrics Server deployment_",
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "ðŸ“Š *Daily Cost Check for ${CLUSTER_NAME}*"
                }
              },
              {
                "type": "section",
                "fields": [
                  {
                    "type": "mrkdwn",
                    "text": "*Cluster CPU:*\n${{ steps.check-metrics.outputs.cpu }}%"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Memory Usage:*\n${{ steps.check-metrics.outputs.memory }}%"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Node Count:*\n${{ steps.check-metrics.outputs.node_count }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Pod Capacity:*\n${{ steps.check-metrics.outputs.pod_usage }}%"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Control Plane:*\n${{ steps.check-metrics.outputs.controlplane }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Instance CPU:*\n${{ steps.check-metrics.outputs.instance_cpu }}%"
                  }
                ]
              },
              {
                "type": "context",
                "elements": [
                  {
                    "type": "mrkdwn",
                    "text": "_Note: Container-level metrics require Metrics Server deployment_"
                  }
                ]
              }
            ]
          }
